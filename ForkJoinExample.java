import java.util.List;
import java.util.concurrent.ForkJoinPool;

/* We will implement a program that will search for files with a specified extension inside a folder and its subfolders. 
 * The ForkJoinTask class we will implement will process the content of a folder. Each subfolder inside that folder will send a new task to the ForkJoinPool class asynchronously. 
 * For each file inside that folder, the task will check the fileâ€™s extension and add it to the result list if it proceeds. 
 */
public class ForkJoinExample {

    public static void main(String[] args) {

        ForkJoinPool pool = ForkJoinPool.commonPool();

        FolderProcessor desktop = new FolderProcessor("/Users/glucas/Desktop/", "png");
        FolderProcessor downloads = new FolderProcessor("/Users/glucas/Downloads/", "pdf");
        FolderProcessor documents = new FolderProcessor("/Users/glucas/Documents/", "log");

        // Execute the three tasks in the pool using the execute() method.
        pool.execute(desktop);
        pool.execute(downloads);
        pool.execute(documents);

        // Write to the console information about the status of the pool every second
        // until the three tasks have finished their execution.
        do {
            System.out.printf("******************************************\n");
            System.out.printf("Main: Parallelism: %d\n", pool.getParallelism());
            System.out.printf("Main: Active Threads: %d\n", pool.getActiveThreadCount());
            System.out.printf("Main: Task Count: %d\n", pool.getQueuedTaskCount());
            System.out.printf("Main: Steal Count: %d\n", pool.getStealCount());
            System.out.printf("******************************************\n");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        } while ((!desktop.isDone()) || (!downloads.isDone()) || (!documents.isDone()));

        pool.shutdown();

        // Write the number of results generated by each task to the console.
        List<String> results;
        results = desktop.join();
        System.out.printf("Desktop: %d files found.\n", results.size());
        results = downloads.join();
        System.out.printf("Downloads: %d files found.\n", results.size());
        results = documents.join();
        System.out.printf("Documents: %d files found.\n", results.size());
    }
}